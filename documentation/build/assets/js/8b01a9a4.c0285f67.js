"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[413],{3905:(e,n,s)=>{s.d(n,{A:()=>a});var i=s(6540),t=s(4848);const a=({src:e,id:n})=>{const s=(0,i.useRef)(null);return(0,i.useEffect)(()=>{const i=document.createElement("script");return i.src=e,i.id=n,i.async=!0,s.current&&s.current.appendChild(i),()=>{const e=document.getElementById(n);e&&e.remove()}},[e,n]),(0,t.jsx)("div",{ref:s})}},4535:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>h,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"level06","title":"\ud83e\uddea Level 06","description":"<MissionObjective","source":"@site/docs/level06.md","sourceDirName":".","slug":"/level06","permalink":"/docs/level06","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/level06.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\uddde\u200d\u2642\ufe0f Level 05","permalink":"/docs/level05"},"next":{"title":"\ud83e\uddc3 Level 07","permalink":"/docs/level07"}}');var t=s(4848),a=s(8453),r=s(3905),l=s(7916),o=s(8620),c=s(4700),d=s(6076);const h={sidebar_position:8},p="\ud83e\uddea Level 06",u={},m=[{value:"Vulnerability Analysis",id:"vulnerability-analysis",level:2},{value:"Program Behavior Analysis",id:"program-behavior-analysis",level:2},{value:"Anti-Debugging Protection",id:"anti-debugging-protection",level:2},{value:"Strategy: Hash Extraction Without Reversing",id:"strategy-hash-extraction-without-reversing",level:2},{value:"Live Demonstration",id:"live-demonstration",level:2},{value:"Step-by-Step Exploitation",id:"step-by-step-exploitation",level:2},{value:"Detailed GDB Session",id:"detailed-gdb-session",level:3},{value:"Assembly Analysis",id:"assembly-analysis",level:2},{value:"Final Exploitation",id:"final-exploitation",level:2},{value:"Alternative Hash Discovery",id:"alternative-hash-discovery",level:2},{value:"Technical Deep Dive",id:"technical-deep-dive",level:2},{value:"Ptrace Anti-Debug Analysis",id:"ptrace-anti-debug-analysis",level:3},{value:"Hash Algorithm Insights",id:"hash-algorithm-insights",level:3},{value:"Debugging Offset Discovery",id:"debugging-offset-discovery",level:2},{value:"Key Learning Points",id:"key-learning-points",level:2},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Technical Summary",id:"technical-summary",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-level-06",children:"\ud83e\uddea Level 06"})}),"\n",(0,t.jsx)(l.A,{level:"Level 06",target:"level07 privileges",method:"Anti-debugging bypass and hash extraction"}),"\n",(0,t.jsx)(n.h2,{id:"vulnerability-analysis",children:"Vulnerability Analysis"}),"\n",(0,t.jsx)(o.A,{type:"Anti-Debug Bypass & Logic Exploitation",severity:"medium",description:"Binary uses ptrace() anti-debugging protection and hash-based authentication. Instead of reversing the hash algorithm, we bypass ptrace and extract the computed hash directly from memory.",techniques:["Anti-Debug Bypass","Memory Extraction","GDB Jump Exploitation","Hash Recovery"]}),"\n",(0,t.jsx)(n.h2,{id:"program-behavior-analysis",children:"Program Behavior Analysis"}),"\n",(0,t.jsx)(c.A,{title:"Binary Authentication Flow",command:"./level06",output:"-> Enter Login: test\n-> Enter Serial: 123\nNope."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Authentication Logic:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Validation"}),": Login must be \u22656 chars, all printable"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Anti-Debug Check"}),": ",(0,t.jsx)(n.code,{children:"ptrace(PTRACE_TRACEME)"})," detects debugger"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hash Calculation"}),": Login string \u2192 integer hash"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Serial Comparison"}),": Hash vs user-provided serial"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Shell Access"}),": If match \u2192 ",(0,t.jsx)(n.code,{children:"/bin/sh"}),", else exit"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"anti-debugging-protection",children:"Anti-Debugging Protection"}),"\n",(0,t.jsx)(c.A,{title:"Ptrace Detection Mechanism",command:"gdb ./level06",output:"(gdb) run\n-> Enter Login: test\n-> Enter Serial: 123\nStarting program: /home/level06/level06 \nNew account detected\n[Inferior 1 (process 1234) exited normally]"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Protection Mechanism:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ptrace(PTRACE_TRACEME)"})," returns -1 if already being traced"]}),"\n",(0,t.jsx)(n.li,{children:'Program detects GDB and exits with "New account detected"'}),"\n",(0,t.jsx)(n.li,{children:"Must bypass this check to analyze the hash algorithm"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"strategy-hash-extraction-without-reversing",children:"Strategy: Hash Extraction Without Reversing"}),"\n",(0,t.jsx)(c.A,{title:"Exploitation Approach",command:"# Instead of reverse engineering hash algorithm",output:"1. Use GDB to bypass ptrace() check\n2. Let program calculate hash naturally\n3. Extract computed hash from memory\n4. Use extracted hash as correct serial\n5. Run program normally with correct credentials"}),"\n",(0,t.jsx)(n.h2,{id:"live-demonstration",children:"Live Demonstration"}),"\n",(0,t.jsx)(r.A,{src:"https://asciinema.org/a/FWDCXErHfqnV2PGcAOl6dtJRS.js",id:"asciicast-FWDCXErHfqnV2PGcAOl6dtJRS"}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-exploitation",children:"Step-by-Step Exploitation"}),"\n",(0,t.jsx)(d.A,{title:"Anti-Debug Bypass and Hash Extraction",steps:[{title:"Setup GDB Breakpoints",description:"Place strategic breakpoints around ptrace and comparison",command:"b *0x080487b5  # ptrace call\nb *0x08048866  # hash comparison",result:"Breakpoints set for anti-debug bypass"},{title:"Initial Program Run",description:"Start program with any login/serial combination",command:"run\nLogin: helloworld\nSerial: 0",result:"Program hits first breakpoint at ptrace"},{title:"Bypass Ptrace Check",description:"Jump over the ptrace call and its validation",command:"jump *0x080487ed",result:"Anti-debug protection bypassed"},{title:"Extract Computed Hash",description:"Read hash value from stack at comparison point",command:"p *(int*)($ebp - 0x10)",result:"Hash value: 106020184"}]}),"\n",(0,t.jsx)(n.h3,{id:"detailed-gdb-session",children:"Detailed GDB Session"}),"\n",(0,t.jsx)(c.A,{title:"Complete GDB Bypass Session",command:"gdb ./level06",output:"(gdb) b *0x080487b5\nBreakpoint 1 at 0x80487b5\n(gdb) b *0x08048866  \nBreakpoint 2 at 0x8048866\n(gdb) run\nStarting program: ./level06\n-> Enter Login: helloworld\n-> Enter Serial: 0\n\nBreakpoint 1, 0x080487b5 in auth ()\n(gdb) jump *0x080487ed\nContinuing at 0x80487ed.\n\nBreakpoint 2, 0x08048866 in auth ()\n(gdb) p *(int*)($ebp - 0x10)\n$1 = 106020184\n(gdb) quit"}),"\n",(0,t.jsx)(n.h2,{id:"assembly-analysis",children:"Assembly Analysis"}),"\n",(0,t.jsx)(c.A,{title:"Key Assembly Points",command:"(gdb) disas auth",output:"0x080487b5: call   0x80485f0 <ptrace@plt>    ; Anti-debug check\n0x080487ba: test   %eax,%eax                    ; Check ptrace return\n0x080487bc: jns    0x80487ed                    ; Jump if not traced\n...\n0x08048866: cmp    -0x10(%ebp),%eax            ; Compare hash with serial\n0x08048869: je     0x8048872                    ; Jump if equal (success)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Critical Memory Layout:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"%ebp - 0x10"}),": Computed hash storage location"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"%eax"}),": User-provided serial for comparison"]}),"\n",(0,t.jsx)(n.li,{children:"Jump targets for bypass and success conditions"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"final-exploitation",children:"Final Exploitation"}),"\n",(0,t.jsx)(c.A,{title:"Successful Authentication",command:"./level06",output:"-> Enter Login: helloworld\n-> Enter Serial: 106020184\nAuthenticated!\n$ whoami\nlevel07\n$ cat /home/users/level07/.pass\nGbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8"}),"\n",(0,t.jsx)(n.h2,{id:"alternative-hash-discovery",children:"Alternative Hash Discovery"}),"\n",(0,t.jsx)(c.A,{title:"Quick Reference Commands",command:"# Complete exploit in one session",output:"gdb ./level06\n(gdb) b *0x080487b5\n(gdb) b *0x08048866\n(gdb) run\n# Login: helloworld, Serial: 0\n(gdb) jump *0x080487ed\n(gdb) p *(int*)($ebp - 0x10)\n# Note the hash value\n(gdb) quit\n./level06\n# Login: helloworld, Serial: <extracted_hash>"}),"\n",(0,t.jsx)(n.h2,{id:"technical-deep-dive",children:"Technical Deep Dive"}),"\n",(0,t.jsx)(n.h3,{id:"ptrace-anti-debug-analysis",children:"Ptrace Anti-Debug Analysis"}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{children:(0,t.jsx)(n.strong,{children:"How Ptrace Protection Works"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ptrace(PTRACE_TRACEME)"})," attaches process to its parent as debugger"]}),"\n",(0,t.jsxs)(n.li,{children:["Returns ",(0,t.jsx)(n.code,{children:"-1"})," if process is already being traced (like by GDB)"]}),"\n",(0,t.jsx)(n.li,{children:"Program checks return value and exits if debugging detected"}),"\n",(0,t.jsx)(n.li,{children:"Bypass: Jump over the ptrace call entirely"}),"\n"]})]}),"\n",(0,t.jsx)(n.h3,{id:"hash-algorithm-insights",children:"Hash Algorithm Insights"}),"\n",(0,t.jsx)(c.A,{title:"Hash Function Characteristics",command:"# Different logins produce different hashes",output:'Login: "hello"     \u2192 Hash: 2134567890\nLogin: "helloworld" \u2192 Hash: 106020184\nLogin: "admin"      \u2192 Hash: 3456789012\n\nEach login produces deterministic hash\nAlgorithm remains opaque but predictable'}),"\n",(0,t.jsx)(n.h2,{id:"debugging-offset-discovery",children:"Debugging Offset Discovery"}),"\n",(0,t.jsx)(c.A,{title:"Finding Key Assembly Offsets",command:"(gdb) disas auth",output:"# Look for these patterns:\ncall   <ptrace@plt>     ; Breakpoint 1 location\ntest   %eax,%eax        ; Ptrace return check\njns    <address>        ; Jump target for bypass\n...\ncmp    -0x10(%ebp),%eax ; Breakpoint 2 location"}),"\n",(0,t.jsx)(n.h2,{id:"key-learning-points",children:"Key Learning Points"}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{children:(0,t.jsx)(n.strong,{children:"Anti-Analysis Techniques"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ptrace Detection"}),": Common anti-debugging protection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dynamic Analysis Bypass"}),": Jump instruction to skip checks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Inspection"}),": Reading computed values without algorithm reversal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Staged Exploitation"}),": Use debugger info in normal execution"]}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,t.jsx)(c.A,{title:"Other Potential Methods",command:"# If GDB bypass fails",output:"1. Binary patching: NOP out ptrace call\n2. LD_PRELOAD: Hook ptrace to return success\n3. Static analysis: Reverse hash algorithm completely\n4. Timing attacks: Brute force with performance analysis"}),"\n",(0,t.jsx)(n.h2,{id:"technical-summary",children:"Technical Summary"}),"\n",(0,t.jsx)(n.p,{children:"This level demonstrates:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Anti-Debug Evasion"})," - Bypassing ptrace protection mechanisms"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dynamic Analysis Techniques"})," - Using debuggers despite protection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Extraction"})," - Reading computed values from stack"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Staged Attack Strategy"})," - Combining debug info with normal execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Creative Problem Solving"})," - Avoiding complex reverse engineering"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The vulnerability showcases how anti-debugging measures can be circumvented through careful debugger manipulation, and how sometimes the simplest approach (letting the program do the work) is more effective than complex reverse"})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}},4700:(e,n,s)=>{s.d(n,{A:()=>m});var i=s(6540);const t="codeContainer_ZrQf",a="codeHeader_PMJ9",r="codeTitle_tp4q",l="copyButton_vymH",o="codeContent_hjih",c="commandSection_kIAe",d="prompt_g6zt",h="command_jQGV",p="output_eCt5";var u=s(4848);const m=({command:e,output:n,language:s="bash",title:m})=>{const[x,g]=(0,i.useState)(!1);return(0,u.jsxs)("div",{className:t,children:[m&&(0,u.jsxs)("div",{className:a,children:[(0,u.jsx)("span",{className:r,children:m}),(0,u.jsx)("button",{className:l,onClick:()=>{const s=e||n||"";navigator.clipboard.writeText(s),g(!0),setTimeout(()=>g(!1),2e3)},children:x?"\u2713":"Copy"})]}),(0,u.jsxs)("div",{className:o,children:[e&&(0,u.jsxs)("div",{className:c,children:[(0,u.jsx)("span",{className:d,children:"$"}),(0,u.jsx)("span",{className:h,children:e})]}),n&&(0,u.jsx)("pre",{className:p,children:n})]})]})}},6076:(e,n,s)=>{s.d(n,{A:()=>x});s(6540);const i="stepsContainer_pG2T",t="step_fonX",a="stepHeader_lANh",r="stepNumber_JMan",l="stepTitle_pSoA",o="stepDescription_I1sy",c="codeBlock_MNNe",d="commandLine_KPva",h="prompt_hyWW",p="command_dhjP",u="output_FTQu";var m=s(4848);const x=({steps:e})=>(0,m.jsx)("div",{className:i,children:e.map((e,n)=>(0,m.jsxs)("div",{className:t,children:[(0,m.jsxs)("div",{className:a,children:[(0,m.jsx)("span",{className:r,children:n+1}),(0,m.jsx)("h3",{className:l,children:e.title})]}),(0,m.jsx)("p",{className:o,children:e.description}),e.command&&(0,m.jsxs)("div",{className:c,children:[(0,m.jsxs)("div",{className:d,children:[(0,m.jsx)("span",{className:h,children:"$"}),(0,m.jsx)("code",{className:p,children:e.command})]}),e.output&&(0,m.jsx)("pre",{className:u,children:e.output})]})]},n))})},7916:(e,n,s)=>{s.d(n,{A:()=>h});s(6540);const i="missionCard_aJIf",t="missionHeader_ujCY",a="levelBadge_E6Y7",r="missionTitle_MLqA",l="missionContent_AuQf",o="missionText_YjWt",c="targetCode_IWAs";var d=s(4848);const h=({target:e,method:n,level:s})=>(0,d.jsxs)("div",{className:i,children:[(0,d.jsxs)("div",{className:t,children:[(0,d.jsx)("span",{className:a,children:s}),(0,d.jsx)("h2",{className:r,children:"Mission Objective"})]}),(0,d.jsx)("div",{className:l,children:(0,d.jsxs)("p",{className:o,children:["Gain access to user ",(0,d.jsx)("code",{className:c,children:e})," by exploiting ",n,"."]})})]})},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},8620:(e,n,s)=>{s.d(n,{A:()=>u});s(6540);const i="card_anxl",t="header_h_Kv",a="title_xshN",r="severityBadge_p8m1",l="description_LGUH",o="techniques_SXJm",c="techniquesTitle_X_0j",d="techniquesList_aLL1",h="techniqueTag_HgBs";var p=s(4848);const u=({type:e,severity:n,description:s,techniques:u})=>{const m=e=>{switch(e){case"low":return"#22c55e";case"medium":return"#f59e0b";case"high":return"#f97316";case"critical":return"#ef4444";default:return"#6b7280"}};return(0,p.jsxs)("div",{className:i,children:[(0,p.jsxs)("div",{className:t,children:[(0,p.jsx)("h3",{className:a,children:e}),(0,p.jsx)("span",{className:r,style:{backgroundColor:`${m(n)}20`,color:m(n),borderColor:`${m(n)}40`},children:n.toUpperCase()})]}),(0,p.jsx)("p",{className:l,children:s}),(0,p.jsxs)("div",{className:o,children:[(0,p.jsx)("h4",{className:c,children:"Techniques"}),(0,p.jsx)("div",{className:d,children:u.map((e,n)=>(0,p.jsx)("span",{className:h,children:e},n))})]})]})}}}]);